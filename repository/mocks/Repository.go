// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	repository "github.com/booking/repository"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: model
func (_m *Repository) Create(model interface{}) error {
	ret := _m.Called(model)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: id
func (_m *Repository) DeleteByID(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: query, model
func (_m *Repository) Get(query []repository.Query, model interface{}) error {
	ret := _m.Called(query, model)

	var r0 error
	if rf, ok := ret.Get(0).(func([]repository.Query, interface{}) error); ok {
		r0 = rf(query, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBetween provides a mock function with given fields: start, end, model
func (_m *Repository) GetBetween(start time.Time, end time.Time, model interface{}) error {
	ret := _m.Called(start, end, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time, interface{}) error); ok {
		r0 = rf(start, end, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id, model
func (_m *Repository) GetByID(id int64, model interface{}) error {
	ret := _m.Called(id, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, interface{}) error); ok {
		r0 = rf(id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
