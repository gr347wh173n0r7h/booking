// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	model "github.com/booking/model"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// BookingService is an autogenerated mock type for the BookingService type
type BookingService struct {
	mock.Mock
}

// Create provides a mock function with given fields: r
func (_m *BookingService) Create(r *model.Meeting) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Meeting) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *BookingService) Delete(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *BookingService) Get(id int64) (*model.Meeting, error) {
	ret := _m.Called(id)

	var r0 *model.Meeting
	if rf, ok := ret.Get(0).(func(int64) *model.Meeting); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Meeting)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: roomID
func (_m *BookingService) GetAll(roomID int) ([]model.Meeting, error) {
	ret := _m.Called(roomID)

	var r0 []model.Meeting
	if rf, ok := ret.Get(0).(func(int) []model.Meeting); ok {
		r0 = rf(roomID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Meeting)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(roomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailable provides a mock function with given fields: date
func (_m *BookingService) GetAvailable(date time.Time) (model.AvailabilityMap, error) {
	ret := _m.Called(date)

	var r0 model.AvailabilityMap
	if rf, ok := ret.Get(0).(func(time.Time) model.AvailabilityMap); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AvailabilityMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
